#app/schemas/run.py
from __future__ import annotations
from typing import Literal
from pydantic import BaseModel, Field, ConfigDict, field_validator, model_validator

#Domain DTOs (user inputs)
class RiskDTO(BaseModel):

    """Risks of the estimate"""

    name: str = Field(..., min_length=1)#no empty strings
    probability: float = Field(..., ge=0.0, le=1.0)#0.0 ≤ probability ≤ 1.0
    impact: float = Field(..., ge=0.0, le=1.0)#0.0 ≤ impact ≤ 1.0

    @field_validator("name", mode="before")
    @classmethod
    def _strip_name(cls, value: str) -> str:
        value = (value or "").strip()
        if not value:
            raise ValueError("name can't be empty")
        return value

class ParamsDTO(BaseModel):

    """Simulation params"""
    backlog: int = Field(..., gt=0)
    t_min: int = Field(..., gt=0)
    t_mode: int = Field(..., gt=0)
    t_max: int = Field(..., gt=0)
    iterations: int = Field(2000, ge=1000, description="number of iterations must be (>= 1000).")

    @model_validator(mode="after")
    def _check_th_order(self) -> "ParamsDTO":
        if not (self.t_min <= self.t_mode <= self.t_max):
            raise ValueError("throughput value has to follow t_min <= t_mode <= t_max.")
        return self

#Requests (public)
class RunRequest(BaseModel):

    """Execute the simulation """

    params: ParamsDTO
    risks: list[RiskDTO] = Field(default_factory=list)


#plts on demand
class OnDemandVisualizerOptionsDTO(BaseModel):

    """These plots will be generated after the simulation."""

    histogram: bool = False
    cdf: bool = False
    convergence: bool = False 


class VisualizeRequest(BaseModel):

    """generates de plots with the results generated by /run."""

    results: list[float] = Field(..., description="results of /run (durations > 0).")
    options: OnDemandVisualizerOptionsDTO

    @field_validator("results")
    @classmethod
    def _results_must_be_positive(cls, values: list[float]) -> list[float]:
        if not values:
            raise ValueError("at least one value is required in order to plot.")
        if any(x <= 0 for x in values):
            raise ValueError("all results must be > 0.")
        return values


#Responses (public)
class ImageDTO(BaseModel):
    kind: Literal["histogram", "cdf", "boxplot", "convergence"]
    image_base64: str


class RunResponse(BaseModel):
    
    results: list[float] = Field(..., description="weeks to complete per iteration.")
    images: list[ImageDTO] = Field(default_factory=list, description="by default it only shows the histogram.")

    model_config = ConfigDict(json_schema_extra={
        "example": {
        "results": [45.0, 23.0, 34.0, 32.0, 26.0],
        "images": [{"kind": "histogram", "image_base64": "<BASE64...>"}]
        }
    })


class VisualizeResponse(BaseModel):
    images: list[ImageDTO]


# Error contract (uniforme)

class ErrorResponse(BaseModel):
    error: Literal["validation_error", "bad_request", "server_error"]
    message: str
    fields: dict[str, str] | None = None
